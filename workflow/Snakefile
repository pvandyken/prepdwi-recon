"""Prepdwi_recon


"""
import os, tempfile
from functools import partial
from snakebids import bids, generate_inputs
import groups
from lib.pipenv import PipEnv
from lib.utils import Tar
from pathlib import Path

configfile: 'config/config.yml'

###
# Input Globals
###
inputs = generate_inputs(
    bids_dir=config['bids_dir'],
    pybids_inputs=config['pybids_inputs'],
    derivatives=config['preprocessed_data'],
    participant_label=config.get("participant_label", None)
)

wildcards = inputs['input_wildcards']['preproc_dwi']
input_paths = inputs['input_path']

###
# Output Globals
###
work = os.environ.get(config.get('tmpdir', ""), tempfile.gettempdir())  + '/prepdwi-recon'
output = config['output_dir'] + "/prepdwi_recon"
qc = Path(output)/"qc"

# Unique ID for easy naming in temporary files
uid = '.'.join(wildcards.values())

###
# bids Partials
###
bids_output_dwi = partial(bids, root=output, space="individual", datatype="dwi", **wildcards)
bids_output_anat = partial(bids, root=output, space="individual", datatype="anat", **wildcards)

###
# Inclusions
###
include: 'rules/anatomical_segmentation.smk'
include: "rules/response_function.smk"
include: 'rules/reconstruction/reconstruction.smk'
include: 'rules/spectral_clustering.smk'
include: 'rules/spectral_clustering/qc.smk'
#include: "rules/qc.smk"

###
# Top level Rules
###
localrules: all, qc

tar = Tar("tmp/prepdwi_tar_files")

test_env = PipEnv(
    packages = [
        'colorama',
        'numpy',
        'black'
    ],
    flags = config["pip-flags"],
    name = "wma",
    root = Path(work)
)

rule all:
    input:
        expand(
            rules.assign_to_anatomical_tracts.output,
            **inputs['input_lists']['preproc_dwi']
        )

rule make_pipenv:
    output:
        "venv.tar.gz"
    shell:
        tar(
            outputs = ["{output}"],
            cmd="virtualenv {output} && cat {output}/pyvenv.cfg",
        )

rule read_gitignore:
    input:
        rules.make_pipenv.output
    output:
        "gitignore.done"
    shell:
        tar(
            inputs=["{input}"],
            cmd="cat {input}/.gitignore && touch {output}"
        )

rule add_gitignore:
    input:
        rules.make_pipenv.output
    output:
        "gitignore.added"
    shell:
        tar(
            modify=["{input}"],
            cmd="echo .pyenv >> {input}/.gitignore && touch {output}"
        )

rule read_pipenv:
    input:
        pip=rules.make_pipenv.output,
        out=rules.read_gitignore.output
    shell:
        tar(
            inputs=["{input.pip}"],
            cmd="cat {input.pip}/pyvenv.cfg"
        )

rule pipenv:
    input: rules.add_gitignore.output



rule tractography:
    input:
        expand(
            rules.run_sift2.output.weights,
            **inputs['input_lists']['preproc_dwi']
        )

# rule qc:
#     input:
#         expand(
#             bids(root=qc,
#                 datatype='dwi',
#                 suffix='{suffixes}',
#                 **wildcards),
#             **inputs['input_lists']['preproc_dwi'],
#             suffixes=["viewTractography", "viewOdf", "viewInterface"]),
#         expand(
#             rules.create_tractography_png.output,
#             **inputs['input_lists']['preproc_dwi'])
